I didn't receive the DEC message, but I can't imagine I would have been bothered if I have. I get tons of uninteresting mail, and system announcements about babies born, etc. At least a demo MIGHT have been interesting. … The amount of harm done by any of the cited "unfair" things the net has been used for is clearly very small. And if they have found any people any jobs, clearly they have done good. If I had a job to offer, I would offer it to my friends first. Is this "evil"? … Would a dating service for people on the net be "frowned upon" by DCA? I hope not. But even if it is, don't let that stop you from notifying me via net mail if you start one. First reaction to reports of the first commercial "spam" email, sent by DEC salesman, Gary Thuerk (8 May 1978), as quoted in "Reaction to the DEC Spam of 1978" Well, Geoff forwarded me a copy of the DEC message, and I eat my words. I sure would have minded it! Nobody should be allowed to send a message with a header that long, no matter what it is about. What they had in common was mainly love of excellence and programming. They wanted to make their programs that they used be as good as they could. They also wanted to make them do neat things. They wanted to be able to do something in a more exciting way than anyone believed possible and show "Look how wonderful this is. I bet you didn't believe this could be done." GNU is not in the public domain. Everyone will be permitted to modify and redistribute GNU, but no distributor will be allowed to restrict its further redistribution. GNU, which stands for Gnu's Not Unix, is the name for the complete Unix-compatible software system which I am writing so that I can give it away free to everyone who can use it. To avoid horrible confusion, please pronounce the G in the word GNU when it is the name of this project. I consider that the golden rule requires that if I like a program I must share it with other people who like it. Software sellers want to divide the users and conquer them, making each user agree not to share with others. I refuse to break solidarity with other users in this way. I cannot in good conscience sign a nondisclosure agreement or a software license agreement. For years I worked within the Artificial Intelligence Lab to resist such tendencies and other inhospitalities, but eventually they had gone too far: I could not remain in an institution where such things are done for me against my will.
    So that I can continue to use computers without dishonor, I have decided to put together a sufficient body of free software so that I will be able to get along without any software that is not free. I have resigned from the AI lab to deny MIT any legal excuse to prevent me from giving GNU away. GNU is not in the public domain. Everyone will be permitted to modify and redistribute GNU, but no distributor will be allowed to restrict its further redistribution. That is to say, proprietary modifications will not be allowed. I want to make sure that all versions of GNU remain free. Once GNU is written, everyone will be able to obtain good system software free, just like air. Arrangements to make people pay for using a program, including licensing of copies, always incur a tremendous cost to society through the cumbersome mechanisms necessary to figure out how much (that is, which programs) a person must pay for. And only a police state can force everyone to obey them. Consider a space station where air must be manufactured at great cost: charging each breather per liter of air may be fair, but wearing the metered gas mask all day and all night is intolerable even if everyone can afford to pay the air bill. And the TV cameras everywhere to see if you ever take the mask off are outrageous. It's better to support the air plant with a head tax and chuck the masks. Copying all or parts of a program is as natural to a programmer as breathing, and as productive. It ought to be as free. It may be true that one can reach more microcomputer users with advertising. If this is really so, a business which advertises the service of copying and mailing GNU for a fee ought to be successful enough to pay for its advertising and more. This way, only the users who benefit from the advertising pay for it. On the other hand, if many people get GNU from their friends, and such companies don't succeed, this will show that advertising was not really necessary to spread GNU. Why is it that free market advocates don't want to let the free market decide this? If anything deserves a reward, it is social contribution. Creativity can be a social contribution, but only in so far as society is free to use the results. If programmers deserve to be rewarded for creating innovative programs, by the same token they deserve to be punished if they restrict the use of these programs. There is nothing wrong with wanting pay for work, or seeking to maximize one's income, as long as one does not use means that are destructive. But the means customary in the field of software today are based on destruction. Extracting money from users of a program by restricting their use of it is destructive because the restrictions reduce the amount and the ways that the program can be used. This reduces the amount of wealth that humanity derives from the program. When there is a deliberate choice to restrict, the harmful consequences are deliberate destruction. The reason a good citizen does not use such destructive means to become wealthier is that, if everyone did so, we would all become poorer from the mutual destructiveness. This is Kantian ethics; or, the Golden Rule. Since I do not like the consequences that result if everyone hoards information, I am required to consider it wrong for one to do so. Specifically, the desire to be rewarded for one's creativity does not justify depriving the world in general of all or part of that creativity. Restricting copying is not the only basis for business in software. It is the most common basis because it brings in the most money. If it were prohibited, or rejected by the customer, software business would move to other bases of organization which are now used less often. There are always numerous ways to organize any kind of business. Control over the use of one's ideas really constitutes control over other people's lives; and it is usually used to make their lives more difficult. The patent system was established to encourage inventors to disclose the details of their inventions. Its purpose was to help society rather than to help inventors. At the time, the life span of 17 years for a patent was short compared with the rate of advance of the state of the art. Since patents are an issue only among manufacturers, for whom the cost and effort of a license agreement are small compared with setting up production, the patents often do not do much harm. They do not obstruct most individuals who use patented products. The idea of copyright did not exist in ancient times, when authors frequently copied other authors at length in works of non-fiction. This practice was useful, and is the only way many authors' works have survived even in part. The copyright system was created expressly for the purpose of encouraging authorship. In the domain for which it was invented — books, which could be copied economically only on a printing press — it did little harm, and did not obstruct most of the individuals who read the books. All intellectual property rights are just licenses granted by society because it was thought, rightly or wrongly, that society as a whole would benefit by granting them. But in any particular situation, we have to ask: are we really better off granting such license? What kind of act are we licensing a person to do? The case of programs today is very different from that of books a hundred years ago. The fact that the easiest way to copy a program is from one neighbor to another, the fact that a program has both source code and object code which are distinct, and the fact that a program is used rather than read and enjoyed, combine to create a situation in which a person who enforces a copyright is harming society as a whole both materially and spiritually; in which a person should not do so regardless of whether the law enables him to. The paradigm of competition is a race: by rewarding the winner, we encourage everyone to run faster. When capitalism really works this way, it does a good job; but its defenders are wrong in assuming it always works this way. If the runners forget why the reward is offered and become intent on winning, no matter how, they may find other strategies — such as, attacking other runners. If the runners get into a fist fight, they will all finish late. People with new ideas could distribute programs as freeware, asking for donations from satisfied users, or selling hand-holding services. I have met people who are already working this way successfully. We have already greatly reduced the amount of work that the whole society must do for its actual productivity, but only a little of this has translated itself into leisure for workers because much nonproductive activity is required to accompany productive activity. The main causes of this are bureaucracy and isometric struggles against competition. Free software will greatly reduce these drains in the area of software production. We must do this, in order for technical gains in productivity to translate into less work for us. I have met bright students in computer science who have never seen the source code of a large program. They may be good at writing small programs, but they can't begin to learn the different skills of writing large ones if they can't see how others have done it. In any intellectual field, one can reach greater heights by standing on the shoulders of others. But that is no longer generally allowed in the software field—you can only stand on the shoulders of the other people in your own company. Hundreds of thousands of babies are born every day. While the whole phenomenon is menacing, one of them by itself is not newsworthy. Nor is it a difficult achievement — even some fish can do it. (Now, if you were a seahorse, it would be more interesting, since it would be the male that gave birth.) ...These birth announcements also spread the myth that having a baby is something to be proud of, which fuels natalist pressure, which leads to pollution, extinction of wildlife, poverty, and ultimately mass starvation. His reaction to a baby announcement on a SFBA social mailing list (21 February 1993), as quoted in "RMS -vs- Doctor, on the evils of Natalism" at Art.net In 1971 when I joined the staff of the MIT Artificial Intelligence lab, all of us who helped develop the operating system software, we called ourselves hackers. We were not breaking any laws, at least not in doing the hacking we were paid to do. We were developing software and we were having fun. Hacking refers to the spirit of fun in which we were developing software. The hacker ethic refers to the feelings of right and wrong, to the ethical ideas this community of people had — that knowledge should be shared with other people who can benefit from it, and that important resources should be utilized rather than wasted. Back in those days computers were quite scarce, and one thing about our computer was it would execute about a third-of-a-million instructions every second, and it would do so whether there was any need to do so or not. If no one used these instructions, they would be wasted. So to have an administrator say, "well you people can use a computer and all the rest of you can't," means that if none of those officially authorized people wanted to use the machine that second, it would go to waste. For many hours every morning it would mostly go to waste. So we decided that was a shame. Anyone should be able to use it who could make use of it, rather than just throwing it away. In general we did not tolerate bureaucratic obstructionism. We felt, "this computer is here, it was bought by the public, it is here to advance human knowledge and do whatever is constructive and useful." So we felt it was better to let anyone at all use it — to learn about programming, or do any other kind of work other than commercial activity. People could no longer learn hacking the way I did, by starting to work on a real operating system, making real improvements. In fact, in the 1980s I often came across newly graduated computer science majors who had never seen a real program in their lives. They had only seen toy exercises, school exercises, because every real program was a trade secret. They never had the experience of writing features for users to really use, and fixing the bugs that real users came across. The things you need to know to do real work. A hacker is someone who enjoys playful cleverness — not necessarily with computers. The programmers in the old MIT free software community of the 60s and 70s referred to themselves as hackers. Around 1980, journalists who discovered the hacker community mistakenly took the term to mean “security breaker.” Publishers and lawyers like to describe copyright as “intellectual property” — a term also applied to patents, trademarks, and other more obscure areas of law. These laws have so little in common, and differ so much, that it is ill-advised to generalize about them. It is best to talk specifically about “copyright,” or about “patents,” or about “trademarks.” The term “intellectual property” carries a hidden assumption—that the way to think about all these disparate issues is based on an analogy with physical objects, and our conception of them as physical property. When it comes to copying, this analogy disregards the crucial difference between material objects and information: information can be copied and shared almost effortlessly, while material objects can't be.
    To avoid spreading unnecessary bias and confusion, it is best to adopt a firm policy not to speak or even think in terms of “intellectual property”.
    The hypocrisy of calling these powers “rights” is starting to make the World “Intellectual Property” Organization embarrassed.
            Writing non-free software is not an ethically legitimate activity, so if people who do this run into trouble, that's good! All businesses based on non-free software ought to fail, and the sooner the better.
      
    The use of “hacker” to mean “security breaker” is a confusion on the part of the mass media. We hackers refuse to recognize that meaning, and continue using the word to mean someone who loves to program, someone who enjoys playful cleverness, or the combination of the two.
       
    If we are content with knowledge as a commodity, accessible only through a computerized bureaucracy, we can simply let companies provide it. But if we want to keep human knowledge open and freely available to humanity, we have to do the work to make it available that way. We have to write a free encyclopedia.
       
    Very ironic things have happened, but nothing to match this — giving the Linus Torvalds Award to the Free Software Foundation is sort of like giving the Han Solo Award to the Rebel Fleet. If you want to accomplish something in the world, idealism is not enough — you need to choose a method that works to achieve the goal. In other words, you need to be pragmatic. Every decision a person makes stems from the person's values and goals. People can have many different goals and values; fame, profit, love, survival, fun, and freedom, are just some of the goals that a good person might have. When the goal is to help others as well as oneself, we call that idealism. My work on free software is motivated by an idealistic goal: spreading freedom and cooperation. I want to encourage free software to spread, replacing proprietary software that forbids cooperation, and thus make our society better. I figure that since proprietary software developers use copyright to stop us from sharing, we cooperators can use copyright to give other cooperators an advantage of their own: they can use our code. If you want to accomplish something in the world, idealism is not enough — you need to choose a method that works to achieve the goal. In other words, you need to be pragmatic, The programmers who write improvements to GCC (or Emacs, or Bash, or Linŭ, or any GPL-covered program) are often employed by companies or universities. When the programmer wants to return his improvements to the community, and see his code in the next release, the boss may say, "Hold on there — your code belongs to us! We don't want to share it; we have decided to turn your improved version into a proprietary software product." Here the GNU GPL comes to the rescue. The programmer shows the boss that this proprietary software product would be copyright infringement, and the boss realizes that he has only two choices: release the new code as free software, or not at all. Almost always he lets the programmer do as he intended all along, and the code goes into the next release. The GNU GPL is not Mr. Nice Guy. It says "no" to some of the things that people sometimes want to do. There are users who say that this is a bad thing — that the GPL "excludes" some proprietary software developers who "need to be brought into the free software community." But we are not excluding them from our community; they are choosing not to enter. Their decision to make software proprietary is a decision to stay out of our community. Being in our community means joining in cooperation with us; we cannot "bring them into our community" if they don't want to join.
    What we can do is offer them an inducement to join. The GNU GPL is designed to make an inducement from our existing software: "If you will make your software free, you can use this code." Of course, it won't win 'em all, but it wins some of the time. If you focus your mind on the freedom and community that you can build by staying firm, you will find the strength to do it. "Stand for something, or you will fall for nothing." And if cynics ridicule freedom, ridicule community...if "hard nosed realists" say that profit is the only ideal...just ignore them, and use copyleft all the same. While free software by any other name would give you the same freedom, it makes a big difference which name we use: different words convey different ideas. In 1998, some of the people in the free software community began using the term "open source software" instead of "free software" to describe what they do. The term "open source" quickly became associated with a different approach, a different philosophy, different values, and even a different criterion for which licenses are acceptable. The Free Software movement and the Open Source movement are today separate movements with different views and goals, although we can and do work together on some practical projects. The fundamental difference between the two movements is in their values, their ways of looking at the world. For the Open Source movement, the issue of whether software should be open source is a practical question, not an ethical one. As one person put it, "Open source is a development methodology; free software is a social movement." For the Open Source movement, non-free software is a suboptimal solution. For the Free Software movement, non-free software is a social problem and free software is the solution. Radical groups in the 1960s developed a reputation for factionalism: organizations split because of disagreements on details of strategy, and then treated each other as enemies. Or at least, such is the image people have of them, whether or not it was true. The relationship between the Free Software movement and the Open Source movement is just the opposite of that picture. We disagree on the basic principles, but agree more or less on the practical recommendations. So we can and do work together on many specific projects. 'We don't think of the Open Source movement as an enemy. The enemy is proprietary software. We are not against the Open Source movement, but we don't want to be lumped in with them. We acknowledge that they have contributed to our community, but we created this community, and we want people to know this. We want people to associate our achievements with our values and our philosophy, not with theirs. We want to be heard, not obscured behind a group with different views. To prevent people from thinking we are part of them, we take pains to avoid using the word "open" to describe free software, or its contrary, "closed", in talking about non-free software. The term "free software" has an ambiguity problem: an unintended meaning, "Software you can get for zero price," fits the term just as well as the intended meaning, "software which gives the user certain freedoms." We address this problem by publishing a more precise definition of free software, but this is not a perfect solution; it cannot completely eliminate the problem. An unambiguously correct term would be better, if it didn't have other problems. The official definition of "open source software," as published by the Open Source Initiative, is very close to our definition of free software; however, it is a little looser in some respects, and they have accepted a few licenses that we consider unacceptably restrictive of the users. The explanation for "free software" is simple — a person who has grasped the idea of "free speech, not free beer" will not get it wrong again. 'The main argument for the term "open source software" is that "free software" makes some people uneasy. That's true: talking about freedom, about ethical issues, about responsibilities as well as convenience, is asking people to think about things they might rather ignore. This can trigger discomfort, and some people may reject the idea for that. It does not follow that society would be better off if we stop talking about these things. Today many people are switching to free software for purely practical reasons. That is good, as far as it goes, but that isn't all we need to do! Attracting users to free software is not the whole job, just the first step. At present, we have plenty of "keep quiet", but not enough freedom talk. Most people involved with free software say little about freedom — usually because they seek to be "more acceptable to business." Software distributors especially show this pattern. Some GNU/Linŭ operating system distributions add proprietary packages to the basic free system, and they invite users to consider this an advantage, rather than a step backwards from freedom.

    To stop using the word "free" now would be a mistake; we need more, not less, talk about freedom.
    If those using the term "open source" draw more users into our community, that is a contribution, but the rest of us will have to work even harder to bring the issue of freedom to those users' attention. We have to say, "It's free software and it gives you freedom!" — more and louder than ever before.

    The Open Source Definition is clear enough, and it is quite clear that the typical non-free program does not qualify. So you would think that "Open Source company" would mean one whose products are free software (or close to it), right? Alas, many companies are trying to give it a different meaning.

    Over the years, many companies have contributed to free software development. Some of these companies primarily developed non-free software, but the two activities were separate; thus, we could ignore their non-free products, and work with them on free software projects. Then we could honestly thank them afterward for their free software contributions, without talking about the rest of what they did.
    We cannot do the same with these new companies, because they won't let us. These companies actively invite the public to lump all their activities together; they want us to regard their non-free software as favorably as we would regard a real contribution, although it is not one. They present themselves as "open source companies," hoping that we will get a warm fuzzy feeling about them, and that we will be fuzzy-minded in applying it.
    This manipulative practice would be no less harmful if it were done using the term "free software." But companies do not seem to use the term "free software" that way; perhaps its association with idealism makes it seem unsuitable. The term "open source" opened the door for this.

    Spreading the idea of freedom is a big job — it needs your help. That's why we stick to the term "free software" in the GNU Project, so we can help do that job. If you feel that freedom and community are important for their own sake — not just for the convenience they bring — please join us in using the term "free software".

2000s

    When I released GNU Emacs and people started using it, they started sending me improvements in the mail. So I would get a message with a bug fix, and a message with a new feature, and another bug fix, and another new feature, and another... and another... until they were pouring in on me so fast that just taking advantage of all of the help people were giving me was a big job. Microsoft doesn't have this problem.
        "The Free Software Movement and the GNU/Linŭ Operating System", address at LinŭTag (July 2000)

    People get the government their behavior deserves. People deserve better than that.
        "Sayings" at Richard Stallman's personal site (c. 2001)

    Odious ideas are not entitled to hide from criticism behind the human shield of their believers' feelings.
        "Sayings" at Richard Stallman's personal site (c. 2001)

    Value your freedom or you will lose it, teaches history. "Don't bother us with politics," respond those who don't want to learn.
        http://www.gnu.org/philosophy/linŭ-gnu-freedom.html "Linŭ, GNU, and freedom" in LinŭWorld (May 2002)

    Geeks like to think that they can ignore politics, you can leave politics alone, but politics won't leave you alone.
        "O'Reilly Open Source Conference: Day 3" by Paul Weinstein, in Apache Week (26 July 2002)

    I could have made money this way, and perhaps amused myself writing code. But I knew that at the end of my career, I would look back on years of building walls to divide people, and feel I had spent my life making the world a worse place.
        On why he decided against writing proprietary software; quoted in Free as in Freedom : Richard Stallman's Crusade for Free Software' (2002) by Sam Williams

    People sometimes ask me if it is a sin in the Church of Emacs to use vi. Using a free version of vi is not a sin; it is a penance. So happy hacking.
        As quoted in Free as in Freedom : Richard Stallman's Crusade for Free Software (2002) by Sam Williams; Ch. 8 : St. Ignucius

    It is hard to write a simple definition of something as varied as hacking, but I think what these activities have in common is playfulness, cleverness, and exploration. Thus, hacking means exploring the limits of what is possible, in a spirit of playful cleverness. Activities that display playful cleverness have "hack value".
        On Hacking (2002)

    Dubya has nominated another caveman for a federal appeals court. Refreshingly, the Democratic Party is organizing opposition.
    The nominee is quoted as saying that if the choice of a sexual partner were protected by the Constitution, "prostitution, adultery, necrophilia, bestiality, possession of child pornography, and even incest and pedophilia" also would be. He is probably mistaken, legally — but that is unfortunate. All of these acts should be legal as long as no one is coerced. They are illegal only because of prejudice and narrowmindedness.
    Some rules might be called for when these acts directly affect other people's interests. For incest, contraception could be mandatory to avoid risk of inbreeding. For prostitution, a license should be required to ensure prostitutes get regular medical check-ups, and they should have training and support in insisting on use of condoms. This will be an advance in public health, compared with the situation today.
    For necrophilia, it might be necessary to ask the next of kin for permission if the decedent's will did not authorize it. Necrophilia would be my second choice for what should be done with my corpse, the first being scientific or medical use. Once my dead body is no longer of any use to me, it may as well be of some use to someone. Besides, I often enjoy rhinophytonecrophilia (nasal sex with dead plants).
        Stallman archives (28 June 2003)

    Free software permits students to learn how software works. Some students, on reaching their teens, want to learn everything there is to know about their computer and its software. They are intensely curious to read the source code of the programs that they use every day. To learn to write good code, students need to read lots of code and write lots of code. They need to read and understand real programs that people really use. Only free software permits this.
    Proprietary software rejects their thirst for knowledge: it says, “The knowledge you want is a secret — learning is forbidden!” Free software encourages everyone to learn. The free software community rejects the “priesthood of technology”, which keeps the general public in ignorance of how technology works; we encourage students of any age and situation to read the source code and learn as much as they want to know. Schools that use free software will enable gifted programming students to advance.

    Fighting patents one by one will never eliminate the danger of software patents, any more than swatting mosquitoes will eliminate malaria.
    Prior art is as effective as US soldiers in Iraq: They control the ground they stand on, and nothing more. I used to say Vietnam, but, well, you know...    I have not seen anyone assume that all the citizens of New York are guilty of murder, violence, robbery, perjury, or writing proprietary software. I am a pessimist by nature. Many people can only keep on fighting when they expect to win. I'm not like that, I always expect to lose. I fight anyway, and sometimes I win. I'm not the main leader in this particular battle. The Electronic Frontier Foundation is fighting. Public Knowledge is fighting. People need to get involved politically. At this point people should go to the EFF website and the Public Knowledge website, and continue doing so over the coming weeks to see how they can get involved in this coming campaign. It's going to take a lot of people spending probably at least twenty minutes. If you care enough about your freedom to spend twenty minutes on it, if you can tear yourself away from whatever little job it is you're doing this week, and next week, and so on. Spend a little time fighting for your freedom, and we can win.
Thanks to Mr. Gates, we now know that an open Internet with protocols anyone can implement is communism; it was set up by that famous communist agent, the US Department of Defense.
People said I should accept the world. Bullshit! I don't accept the world.
     It doesn't take special talents to reproduce — even plants can do it. On the other hand, contributing to a program like Emacs takes real skill. That is really something to be proud of. It helps more people, too. It is funny, but I’m disappointed that it accentuates the shallow. Medical marijuana grower and activist Steve McWilliams killed himself last June, rather than face 6 months in prison with no marijuana to relieve his chronic pain. If you are ever in a situation like this, don't kill yourself in private. Make your death itself be a blow against the tyrant. Plead innocent; then kill yourself in the courtroom, with the jury and journalists watching, after defying the judge by shouting, "I'm a medical marijuana grower. You were going to make those 12 honest citizens your tools for evil, but I will save them from you. May my death be on your conscience for as long as you live." I don't have a problem with someone using their talents to become successful, I just don't think the highest calling is success. Things like freedom and the expansion of knowledge are beyond success, beyond the personal. Personal success is not wrong, but it is limited in importance, and once you have enough of it it is a shame to keep striving for that, instead of for truth, beauty, or justice. The part of these immigration bills that I hate most is the requirement for new forms of identification and surveillance of US citizens. I gather this is supported by nearly everyone in Congress. Orwellian surveillance is not controversial in the US, where "Land of the Free" has been replaced with "Let me see your papers."
    When the US adopted a requirement for US citizens to prove their citizenship in order to get a job, I vowed I would never do so. I will never again be an employee in the US.
       You can use any editor you want, but remember that vi vi vi is the text editor of the beast.

    My favorite programming languages are Lisp and C. However, since around 1992 I have worked mainly on free software activism, which means I am too busy to do much programming. Around 2008 I stopped doing programming projects.
    
    The most powerful programming language is Lisp. If you don't know Lisp (or its variant, Scheme), you don't know what it means for a programming language to be powerful and elegant. Once you learn Lisp, you will understand what is lacking in most other languages.
    When you start a Lisp system, it enters a read-eval-print loop. Most other languages have nothing comparable to read, nothing comparable to eval, and nothing comparable to print. What gaping deficiencies!
    
    No person, no idea, and no religion deserves to be illegal to insult, not even the Church of Emacs — and certainly not Islam. To have the choice between proprietary software packages, is being able to choose your master. Freedom means not having a master. And in the area of computing, freedom means not using proprietary software. Laws that oppress people have no moral authority. The Adobe flash plug-in is non-free software, and people should not install it, or suggest installing it, or even tell people it exists.
       For personal reasons, I do not browse the web from my computer. (I also have no net connection much of the time.) To look at page I send mail to a daemon which runs wget and mails the page back to me. It is very efficient use of my time, but it is slow in real time.
     Four species of penguins that breed in Antartica are endangered by global warming.
    Even I, the only man in the world who can get angry from looking at a picture of a penguin, find this bad news.
        We need to teach people to refuse to install non-free plug-ins; we need to teach people to care more about their long-term interest of freedom than their immediate desire to view a particular site.
        Freedom and community are important. Gratis software is not worth such an effort, because price is usually not an ethical issue. Paying isn’t wrong, and being paid isn’t wrong. Trampling other people’s freedom and community is wrong, so the free software movement aims to put an end to it, at least in the area of software.
       Isn't it ironic that the proprietary software developers call us communists? We are the ones who have provided for a free market, where they allow only monopoly. … if the users chooses this proprietary software package, he then falls into this monopoly for support … the only way to escape from monopoly is to escape from proprietary software, and that is what the free software movement is all about. We want you to escape and our work is to help you escape. We hope you will escape to the free world. The free world is the new continent in cyberspace that we have built so we can live here in freedom. It's impossible to live in freedom in the old world of cyberspace, where every program has its feudal lord that bullies and mistreats the users. So, to live in freedom we have to build a new continent. Because this is a virtual continent, it has room for everyone, and there are no immigration restrictions. And because there were never indigenous peoples in cyberspace, there is also no issue of taking away their land. So everyone is welcome in the free world, come to the free world, live with us in freedom. The free software movement aims for the liberation of cyberspace and everyone in it.
        If you have a portable surveillance and tracking device, please turn it off. They have already tracked you in here, they already know you are listening to me; so, there is no need for you to keep it on. And by the way, these portable tracking devices emit signals for tracking purposes even when they are apparently switched off; the only way to stop them is to take out all the batteries. And if they want to listen, they don't have to do it through your portable surveillance device, I expect recordings will be posted they can listen to those, and they are even welcome to come and attend. So there is absolutely no reason why your portable tracking and surveillance device has to be on.
           The GNU GPL was not designed to be "open source". I wrote it for the w:free software movement, and its purpose is to ensure every user of every version of the program gets the essential freedoms. See http://www.gnu.org/philosophy/open-source-misses-the-point.html for more explanation of the difference between free software and open source.
      It's stupidity. It's worse than stupidity: it's a marketing hype campaign. … Somebody is saying this is inevitable – and whenever you hear somebody saying that, it's very likely to be a set of businesses campaigning to make it true.
       One reason you should not use web applications to do your computing is that you lose control. It's just as bad as using a proprietary program. Do your own computing on your own computer with your copy of a freedom-respecting program. If you use a proprietary program or somebody else's web server, you're defenceless. You're putty in the hands of whoever developed that software. There are tremendous actual differences in values. Some value systems, such as the ones that motivate "honor killings", deserve to be morally condemned and rejected. But there are many other variations in values within the bounds of decency. Snow is so beautiful, it doesn't have to be useful.  It's clear that other problems such as religious fundamentalism, overpopulation, damage to the environment, and the domination of business over government, science, thought, and society, are much bigger than non-free software. But many other people are already working on them, and I don't have any great aptitude or ideas for how to address them. So it seems best for me to keep working on the issue of free software. Besides, free software does counter one aspect of business domination of society. If in my lifetime the problem of non-free software is solved, I could perhaps relax and write software again. But I might instead try to help deal with the world's larger problems. Standing up to an evil system is exhilarating, and now I have a taste for it.

    I never imagined that the Free Software Movement would spawn a watered-down alternative, the Open Source Movement, which would become so well-known that people would ask me questions about "open source" thinking that I work under that banner. Calling the whole system "Linŭ" leads people to think that the system's development was started in 1991 by Linus Torvalds. That is what most users seem to think. The occasional few users that do know about the GNU Project often think we played a secondary role — for example, they say to me, 'Of course I know about GNU — GNU developed some tools that are part of Linŭ'. I see nothing unethical in the job it does. Why shouldn't you send a copy of some music to a friend? The War on Drugs has continued for some 20 years, and we see little prospect of peace, despite the fact that it has totally failed and given the US an imprisonment rate almost equal to Russia. I fear that the War on Copying could go on for decades as well. To end it, we will need to rethink the copyright system, based on the Constitution's view that it is meant to benefit the public, not the copyright owners. Today, one of the benefits the public wants is the use of computers to share copies. Religious people often say that religion offers absolute certainty about right and wrong; "god tells them" what it is. Even supposing that the aforementioned gods exist, and that the believers really know what the gods think, that still does not provide certainty, because any being no matter how powerful can still be wrong. Whether gods exist or not, there is no way to get absolute certainty about ethics. Without absolute certainty, what do we do? We do the best we can. Injustice is happening now; suffering is happening now. We have choices to make now. To insist on absolute certainty before starting to apply ethics to life decisions is a way of choosing to be amoral.
 He [somebody at Carnegie Mellon University] had betrayed us. But he didn't just do it to us. Chances are he did it to you too. [Pointing at member of audience.] And I think, mostly likely, he did it to you too. [Pointing at another member of audience.][Laughter] And he probably did it to you as well. [Pointing to third member of audience.] He probably did it to most of the people here in this room — except a few, maybe, who weren't born yet in 1980. Because he had promised to refuse to cooperate with just about the entire population of the Planet Earth. He had signed a non-disclosure agreement. Sometimes you can justify doing something that hurts other people by saying otherwise something worse is going to happen to me. You know, if you were *really* going to starve, you'd be justified in writing proprietary software. I've always lived cheaply. I live like a student, basically. And I like that, because it means that money is not telling me what to do. I can do what I think is important for me to do. It freed me to do what seemed worth doing. So make a real effort to avoid getting sucked into all the expensive lifestyle habits of typical Americans. Because if you do that, then people with the money will dictate what you do with your life. You won't be able to do what's really important to you. …when I do this, some people think that it's because I want my ego to be fed, right? Of course, I'm not saying — I'm not asking you to call it "Stallmanix," right? We want to replace proprietary software, with its unjust social system with Free Software and its ethical social system. And so we develop free replacements for proprietary software, and other free programs whenever we get an idea, so that the world can live in freedom. The part that uses computers, at least, in that one area of life. Because winning and maintaining freedom in general is a much bigger, much broader and harder activity, but this is one part of it. This is the greatest political question of our time. How can we put an end to the empire of mega-corporations and restore democracy? If I knew I would be the savior of the world. What I think I can tell is that the media are crucial. The power of the corporate media enables truth to be suppressed and lies to be passed as truth. You probably heard that a half-truth can be worse than a lie. A lot of the things that our governments and media saying are 1/10 truths, 9/10 lies. And it doesn't take very many of them together to create a completely fictional world view (like the one that Bush presents when he talks). So I recommend that people stop listening to the mainstream media. Don't watch television news. Don't listen the news on radio. Don't read news from ordinary newspapers. Get it from variety of web sites which are not operated under the power of business money and you'll have better chance of not being fooled by the systematic lies that they all tell, because they're all paid by the same people to tell the same lies or 9/10 lies. C++ is a badly designed and ugly language. It would be a shame to use it in Emacs. Andrew Holland was prosecuted in the UK for possessing "extreme pornography", a term which appears to mean porn that judges and prosecutors consider shocking. He had received a video showing a tiger having sex with a woman, or at least apparently so. He was found innocent because the video he received was a joke. I am glad he was not punished, but this law is nonetheless a threat to other people. If Mr Holland had had a serious video depicting a tiger having sex with a woman, he still would not deserve to go to prison. … I've read that male dolphins try to have sex with humans, and female apes solicit sex from humans. What is wrong with giving them what they want, if that's what turns you on, or even just to gratify them? But this law is not concerned with protecting animals, since it does not care whether the animal really had sex, or really existed at all. It only panders to the prejudice of censors. A parrot once had sex with me. I did not recognize the act as sex until it was explained to me afterward, but being stroked on the hand by his soft belly feathers was so pleasurable that I yearn for another chance. I have a photo of that act; should I go to prison for it? Perhaps I am spared because this photo isn't "disgusting", but "disgusting" is a subjective matter; we must not imprison people merely because someone feels disgusted. I find the sight of wounds disgusting; fortunately surgeons do not. Maybe there is someone who considers it disgusting for a parrot to have sex with a human. Or for a dolphin or tiger to have sex with a human. So what? Others feel that all sex is disgusting. There are prejudiced people that want to ban all depiction of sex, and force all women to cover their faces. This law and the laws they want are the same in spirit. Threatening people with death or injury is a very bad thing, but violence is no less bad for being nonsexual. Is it worse to shoot someone while stroking that person's genitals than to shoot someone from a few feet away? If I were going to be the victim, and I were invited to choose one or the other, I would choose whichever one gave me the best chance to escape. Images of violence can be painful to see, but they are no better for being nonsexual. I saw images of gruesome bodily harm in the movie Pulp Fiction. I do not want to see anything like that again, sex or no sex. That is no reason to censor these works, and would still not be a reason even if most people reacted to them as I do. Since the law doesn't care whether a real human was really threatened with harm, it is not really concerned about our safety from violence, any more than it is concerned with avoiding suffering for corpses or animals. It is only prejudice, taking a form that can ruin people's lives. It is unfortunate that he still has nonfree software in his computer. He needs to defenestrate it (which means, either throw Windows out of the computer or throw the computer out of the window). Nobody deserves to have to die — not Jobs, not Mr. Bill, not even people guilty of bigger evils than theirs. But we all deserve the end of Jobs' malign influence on people's computing. You see, some people have a talent for programming. At ten to thirteen years old, typically, they're fascinated, and if they use a program, they want to know: “How does it do this?” But when they ask the teacher, if it's proprietary, the teacher has to say: “I'm sorry, it's a secret, we can't find out.” Which means education is forbidden. A proprietary program is the enemy of the spirit of education. It's knowledge withheld, so it should not be tolerated in a school, even though there may be plenty of people in the school who don't care about programming, don't want to learn this. Still, because it's the enemy of the spirit of education, it shouldn't be there in the school. But if the program is free, the teacher can explain what he knows, and then give out copies of the source code, saying: “Read it and you'll understand everything.” And those who are really fascinated, they will read it! And this gives them an opportunity to start to learn how to be good programmers. To learn to be a good programmer, you'll need to recognize that certain ways of writing code, even if they make sense to you and they are correct, they're not good because other people will have trouble understanding them. Good code is clear code that others will have an easy time working on when they need to make further changes. How do you learn to write good clear code? You do it by reading lots of code, and writing lots of code. Well, only free software offers the chance to read the code of large programs that we really use. And then you have to write lots of code, which means you have to write changes in large programs. How do you learn to write good code for the large programs? You have to start small, which does not mean small program, oh no! The challenges of the code for large programs don't even begin to appear in small programs. So the way you start small at writing code for large programs is by writing small changes in large programs. And only free software gives you the chance to do that. Why is it bad to use an unauthorized copy of a proprietary program? Because it’s proprietary! So an unauthorized copy is almost as nasty as an authorized copy of the same program. They are both nasty because they are proprietary. The users don’t have control over them. If they pay developer – that makes it worse, because they are rewarding this delinquency. That’s why the authorized copy is worse. But they are both bad because they are both proprietary software. If you want freedom, you have to get rid of them both, because they both control you. While corporations dominate society and write the laws, each advance in technology is an opening for them to further restrict its users. There is little evidence to justify the widespread assumption that willing participation in pedophilia hurts children. Granted, children may not dare say no to an older relative, or may not realize they could say no; in that case, even if they do not overtly object, the relationship may still feel imposed to them. That's not willing participation, it's imposed participation, a different issue. If the users don't control the program, the program controls the users. With proprietary software, there is always some entity, the "owner" of the program, that controls the program—and through it, exercises power over its users. A nonfree program is a yoke, an instrument of unjust power. Friends share music with each other, they don't allow themselves to be divided by a system that says that nobody is supposed to have copies. Using GPL is encroaching on our rights to encroach on yours. Any time I connect to a website other than Wikipedia, it's through Tor. You and I we exist for ourselves, fundamentally. We should care about others but each human being is a source of value, each human being deserves things. And so if you lose control over your computing, that's bad for you, directly bad for you. So my first reaction is to say: Oh, what a shame; I hope you recover the control over your computing and the way you do that is to stop using the non-free software.
